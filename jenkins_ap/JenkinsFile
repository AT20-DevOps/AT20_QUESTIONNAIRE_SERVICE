pipeline {
  agent any
  environment {
    DOCKER_PASS = credentials('docker_pass')
    SONAR_TOKEN = credentials('sonar_token')
  }
  stages {
    stage('Test') {
      agent { docker 'node:18-alpine3.16' }
      steps {
        sh 'npm install'
        sh 'npm test'
      }
      post{
          always{
            archiveArtifacts artifacts: 'tests/test-results/', followSymlinks: false 
          }
        }
    }
    stage('Code Inspection'){
      steps{
        withSonarQubeEnv('sonar_scanner'){
          sh '/var/jenkins_home/.sonar/sonar-scanner-4.7.0.2747-linux/bin/sonar-scanner \
            -Dsonar.organization=at-20-questionnaire-ap \
            -Dsonar.projectKey=Adalid_AT20_QUESTIONNAIRE_SERVICE \
            -Dsonar.sources=. \
            -Dsonar.host.url=https://sonarcloud.io'
        }
      }
    }
    stage('Quality Gate') {
      steps {
        timeout(time: 1, unit: 'HOURS') {
          script {
            def qg = waitForQualityGate()
            if (qg.status != 'OK') {
              error "Pipeline aborted due to quality gate failure: ${qg.status}"
            }
          }
        }
      }
    }
    stage('Package'){
      steps{
        sh 'docker build -t questionnaire-service .'
      }
    }
    stage('Publish'){
      steps {
        sh 'docker login -u adalid21 -p ${DOCKER_PASS}'
        sh 'docker tag questionnaire-service adalid21/questionnaire-service'
        sh 'docker push adalid21/questionnaire-service'
      }
    }
    stage('DeployToDev'){
      steps{
        sh 'docker-compose -f docker-compose-ap.yaml up -d'
        sh 'echo command to run smoke test'
      }
    }
  }
  post{
      always {
        sh 'docker rmi $(docker images -f "dangling=true" -q)'
        sh 'docker system prune -a'
      }
  }
}
